import RBF神经网络
import 数据管理
import 日志管理
import 杂项
import 流量处理器
import 配置管理
from 日志管理 import 日志记录器

if __name__ == '__main__':
    # 杂项控制
    杂项.初始化可视化相关()
    # 读取原始数据并预处理数据
    读取的原始数据 = 数据管理.加载原始数据(数据路径=配置管理.数据文件路径,
                                           MAT变量列表=配置管理.MAT变量列表,
                                           数据长度=配置管理.数据长度,
                                           配置最小库容=配置管理.最小库容,
                                           配置最大库容=配置管理.最大库容)
    预处理后的数据 = 数据管理.预处理数据(读取的原始数据, 配置管理.数据长度, 配置管理.最小库容, 配置管理.最大库容)
    # 数据预处理完毕
    原始数据_入库流量 = 预处理后的数据["原始数据"]["入库流量"]
    原始数据_需水量 = 预处理后的数据["原始数据"]["需水量"]
    流量处理后_入库流量数据 = 流量处理器.处理流量数据(配置管理.入库流量窗口大小, 原始数据_入库流量)
    # 绘制分解图
    流量处理器.绘制分解图(原始数据_入库流量, 流量处理后_入库流量数据["平滑后"], 流量处理后_入库流量数据["趋势"],
                          流量处理后_入库流量数据["季节性"], 流量处理后_入库流量数据["残差"], 配置管理.入库流量窗口大小)
    # 动态库容时序取出
    动态库容时序序列 = 预处理后的数据["时序数据"]["动态库容时序"]
    # 保留原本的代码
    日志记录器.info("数据预处理【待补充】完成，有效数据量：%d", len(原始数据_入库流量))
    # 数据预处理结束 进行模型训练和多目标优化
    日志记录器.info("\n=== 阶段2：模型训练与优化 ===")
    # 使用KMeans先快速生成可行解，并将K-Means的RBF神经网络计算结果作为NSGA-II的初始种群种子，进化算法会：
    有预报输入特征, 有预报目标输出 = RBF神经网络.准备RBF训练数据(原始数据_入库流量, 动态库容时序序列, 原始数据_需水量,
                                                                 True, 配置管理.最小放水量, 配置管理.最大泄洪量,
                                                                 配置管理.库容调节系数, 配置管理.最小库容,
                                                                 配置管理.最大库容)
    无预报输入特征, 无预报目标输出 = RBF神经网络.准备RBF训练数据(原始数据_入库流量, 动态库容时序序列, 原始数据_需水量,
                                                                 True, 配置管理.最小放水量, 配置管理.最大泄洪量,
                                                                 配置管理.库容调节系数, 配置管理.最小库容,
                                                                 配置管理.最大库容)
    有预报的权重结果 = RBF神经网络.训练RBF网络(配置管理.RBF隐含层节点数, 有预报输入特征, 有预报目标输出, "有预报")
    无预报的权重结果 = RBF神经网络.训练RBF网络(配置管理.RBF隐含层节点数, 无预报输入特征, 无预报目标输出, "无预报")
    print("等待")
